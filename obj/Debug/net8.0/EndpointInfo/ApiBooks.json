{
  "openapi": "3.0.1",
  "info": {
    "title": "ApiBooks",
    "version": "v1"
  },
  "paths": {
    "/api/Book/GetBooks": {
      "get": {
        "tags": [
          "Book"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Book/CreateBook": {
      "post": {
        "tags": [
          "Book"
        ],
        "summary": "Create a new book",
        "description": "Creates a new book.",
        "parameters": [
          {
            "name": "title",
            "in": "query",
            "description": "The title of the book",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The author of the book",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "available",
            "in": "query",
            "description": "The availability of the book",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Book created successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/Book/UpdateBook/{id}": {
      "put": {
        "tags": [
          "Book"
        ],
        "summary": "Update an existing book",
        "description": "Updates an existing book.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The ID of the book",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "title",
            "in": "query",
            "description": "The title of the book",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "author",
            "in": "query",
            "description": "The author of the book",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "available",
            "in": "query",
            "description": "The availability of the book",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Book updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Book not found"
          }
        }
      }
    },
    "/api/Book/DeleteBook/{id}": {
      "delete": {
        "tags": [
          "Book"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/Reservation/GetReservations": {
      "get": {
        "tags": [
          "Reservation"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reservation"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reservation"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Reservation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/Reservation/CreateReservation": {
      "post": {
        "tags": [
          "Reservation"
        ],
        "summary": "Create a new reservation",
        "description": "Creates a new reservation for a book.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The ID of the reservation",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "bookId",
            "in": "query",
            "description": "The ID of the book being reserved",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userName",
            "in": "query",
            "description": "The username of the person making the reservation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reservationDate",
            "in": "query",
            "description": "The date the reservation was made",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "returnDate",
            "in": "query",
            "description": "The date the book is expected to be returned",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Reservation created successfully",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/Reservation"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reservation"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/Reservation"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input"
          }
        }
      }
    },
    "/api/Reservation/UpdateReservation": {
      "put": {
        "tags": [
          "Reservation"
        ],
        "summary": "Update an existing reservation",
        "description": "Updates an existing reservation for a book.",
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "description": "The ID of the reservation",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "bookId",
            "in": "query",
            "description": "The ID of the book being reserved",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "userName",
            "in": "query",
            "description": "The username of the person making the reservation",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "reservationDate",
            "in": "query",
            "description": "The date the reservation was made",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "returnDate",
            "in": "query",
            "description": "The date the book is expected to be returned",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Reservation updated successfully"
          },
          "400": {
            "description": "Invalid input"
          },
          "404": {
            "description": "Reservation not found"
          }
        }
      }
    },
    "/api/Reservation/DeleteReservation/{id}": {
      "delete": {
        "tags": [
          "Reservation"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ],
        "operationId": "GetWeatherForecast",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast"
                  }
                }
              },
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast"
                  }
                }
              },
              "text/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Book": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "author": {
            "type": "string",
            "nullable": true
          },
          "available": {
            "type": "boolean",
            "nullable": true
          },
          "reservations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Reservation"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Reservation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "bookId": {
            "type": "integer",
            "format": "int32"
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "reservationDate": {
            "type": "string",
            "format": "date-time"
          },
          "returnDate": {
            "type": "string",
            "format": "date-time"
          },
          "book": {
            "$ref": "#/components/schemas/Book"
          }
        },
        "additionalProperties": false
      },
      "WeatherForecast": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "format": "date"
          },
          "temperatureC": {
            "type": "integer",
            "format": "int32"
          },
          "temperatureF": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "summary": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}